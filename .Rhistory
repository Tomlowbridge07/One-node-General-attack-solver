else
{
return(0)
}
}
return(TruncNormalPDF)
}
TruncatedNormalTestPDF=TruncatedNormalTestPDF(1.2,1,0,3.7)
TruncastedNormalTestCDF=GenerateCDF(TruncatedNormalTestPDF)
TruncatedNormalPDFGenerator<-function(mean,sd,a,b)
{
TruncNormalPDF<-function(x)
{
if(x<a)
{
return(0)
}
else if(x<=b)
{
return((dnorm((x-mean)/sd))/sd*(pnorm(((b-mean)/sd))-pnorm((a-mean)/sd)))
}
else
{
return(0)
}
}
return(TruncNormalPDF)
}
TruncatedNormalTestPDF=TruncatedNormalPDFGenerator(1.2,1,0,3.7)
TruncastedNormalTestCDF=GenerateCDF(TruncatedNormalTestPDF)
TruncatedNormalPDFGenerator<-function(mean,sd,a,b)
{
TruncNormalPDF<-function(x)
{
if(x<a)
{
return(0)
}
else if(x<=b)
{
return((dnorm((x-mean)/sd))/sd*(pnorm(((b-mean)/sd))-pnorm((a-mean)/sd)))
}
else
{
return(0)
}
}
return(TruncNormalPDF)
}
TruncatedNormalTestPDF=TruncatedNormalPDFGenerator(1.2,1,0,3.7)
TruncatedNormalTestCDF=GenerateCDF(TruncatedNormalTestPDF)
TruncatedNormalTestCDF(3)
TruncatedNormalTestCDF(1.2)
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2)
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
MixedNormalCDF(1)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,1,0,3.7)
TruncatedNormalTestCDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,1,0,3.7)
TruncatedNormalTestCDF=GenerateCDF(TruncatedNormalTest2PDF)
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2)
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
MixedNormalCDF(1)
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
MixedNormalCDF(1)
MixedNormalCDF(3.7)
TruncastedNormalTestCDF(3.7)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,1,0,3.7)
TruncatedNormalTestCDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
TruncatedNormalTest2CDF(2)
TruncatedNormalTest2CDF(0)
TruncatedNormalTest2CDF(3.7)
TruncatedNormalPDFGenerator<-function(mean,sd,a,b)
{
TruncNormalPDF<-function(x)
{
if(x<a)
{
return(0)
}
else if(x<=b)
{
return((dnorm((x-mean)/sd))/(sd*(pnorm(((b-mean)/sd))-pnorm((a-mean)/sd))))
}
else
{
return(0)
}
}
return(TruncNormalPDF)
}
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,1,0,3.7)
TruncatedNormalTestCDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
TruncatedNormalTest2CDF(3.7)
TruncatedNormalTest1CDF(3.7)
TruncatedNormalPDFGenerator<-function(mean,sd,a,b)
{
TruncNormalPDF<-function(x)
{
if(x<a)
{
return(0)
}
else if(x<=b)
{
return((dnorm((x-mean)/sd))/(sd*(pnorm(((b-mean)/sd))-pnorm((a-mean)/sd))))
}
else
{
return(0)
}
}
return(TruncNormalPDF)
}
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
TruncatedNormalTest1CDF(3.7)
MixedNormalCDF(3.7)
MixedNormalCDF(2)
MixedNormalCDF(1)
MixedNormalPDF(2)
plot(MixedNormalPDF)
curve(MixedNormalPDF)
curve(MixedNormalPDF,0,3.7)
curve(Vectorize(MixedNormalPDF),0,3.7)
rep(0,3.7,0.1)
rep(0,3.7,1)
rep(0,3.7,100)
seq(0,3.7,100)
seq(0,3.7,0.1)
PlotPDF<-function(PDF,from,to,stepsize)
{
XCoordinates=seq(from,to,stepsize)
YCoordinates=vector(length(XCoordinates))
for(i in 1:length(YCoordinates))
{
YCoordinates[i]=PDF(XCoordinates[i])
}
XYCoordiantes=data.frame(XCoordinates)
XYCoordiantes=cbind(XYCoordiantes,YCoordinates)
MeltedDataFrame=melt(XYCoordiantes,id="XCoordinates")
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value),show.legend='True')+geom_line()
print(Plot)
}
PlotPDF(MixedNormalPDF,0,3.7,0.1)
PlotPDF<-function(PDF,from,to,stepsize)
{
XCoordinates=seq(from,to,stepsize)
YCoordinates=vector(length=length(XCoordinates))
for(i in 1:length(YCoordinates))
{
YCoordinates[i]=PDF(XCoordinates[i])
}
XYCoordiantes=data.frame(XCoordinates)
XYCoordiantes=cbind(XYCoordiantes,YCoordinates)
MeltedDataFrame=melt(XYCoordiantes,id="XCoordinates")
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value),show.legend='True')+geom_line()
print(Plot)
}
PlotPDF(MixedNormalPDF,0,3.7,0.1)
MixedNormalPDF(1)
MixedNormalPDF(0)
MixedNormalPDF(0)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
MixedNormalPDF(0)
TruncatedNormalTest1PDF(1)
TruncatedNormalTest1PDF(0)
PlotPDF(TruncatedNormalTest1PDF,0,3.7,0.1)
PlotPDF(TruncatedNormalTest2PDF,0,3.7,0.1)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,3,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
PlotPDF(TruncatedNormalTest1PDF,0,3.7,0.1)
PlotPDF(TruncatedNormalTest2PDF,0,3.7,0.1)
PlotPDF(MixedNormalPDF,0,3.7,0.1)
PlotPDF(TruncatedNormalTest1PDF,0,3.7,0.1)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,0.1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
PlotPDF(TruncatedNormalTest1PDF,0,3.7,0.1)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,0.1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.2,0.1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,0.5,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
PlotPDF(MixedNormalPDF,0,3.7,0.1)
MixedNormalCDF(3.7)
MixedNormalCDF(0)
MixedNormalCDF(2)
OE=SolveForMultipleOmega(0,1,100,MixedNormalCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE
PlotPDF(MixedNormalPDF,0,3.7,0.1)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(2.5,0.2,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
PlotPDF(MixedNormalPDF,0,3.7,0.1)
OE=SolveForMultipleOmega(0,1,100,MixedNormalCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.7,0.1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(3.2,0.1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.5)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
PlotPDF(MixedNormalPDF,0,3.7,0.1)
OE=SolveForMultipleOmega(0,1,100,MixedNormalCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.7,0.1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(3.2,0.1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.2)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
OE=SolveForMultipleOmega(0,1,100,MixedNormalCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE
PlotPDF(MixedNormalPDF,0,3.7,0.1)
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.7,0.3,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(3.2,0.3,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.2)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
PlotPDF(MixedNormalPDF,0,3.7,0.1)
OE
OE=SolveForMultipleOmega(0,1,100,MixedNormalCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE
OE=SolveForMultipleOmega(0,5,100,MixedNormalCDF,4,3,1,0.1)
OE
PlotPDF(MixedNormalPDF,0,3.7,0.1)
CostToProgress=GenerateCostToProgressMatrix(5,4,1,0.1,MixedNormalCDF)
CostToProgress
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.7,0.1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(3.2,0.1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.2)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
CostToProgress=GenerateCostToProgressMatrix(5,4,1,0.1,MixedNormalCDF)
CostToProgress
GenerateCostToProgressMatrix(5,4,1,0.1,SmallRightSkewTriDisCDF)
SmallRightSkewTriDisCDF(4)
SmallRightSkewTriDisCDF(5)
SmallRightSkewTriDisCDF(3.7)
TriangularDistributionPDFGenerator<-function(a,b,c)
{
TriDisPDF<-function(x)
{
if(x<a)
{
return(0)
}
else if(x<c)
{
return((2*(x-a))/((b-a)*(c-a)))
}
else if(x==c)
{
return(2/(b-a))
}
else if(x<=b)
{
return((2*(b-x))/((b-a)*(b-c)))
}
else
{
return(0)
}
}
return(TriDisPDF)
}
SmallRightSkewTriDisPDF=TriangularDistributionPDFGenerator(0,3.7,1.95)
SmallRightSkewTriDisCDF=GenerateCDF(SmallRightSkewTriDisPDF)
TruncatedNormalPDFGenerator<-function(mean,sd,a,b)
{
TruncNormalPDF<-function(x)
{
if(x<a)
{
return(0)
}
else if(x<=b)
{
return((dnorm((x-mean)/sd))/(sd*(pnorm(((b-mean)/sd))-pnorm((a-mean)/sd))))
}
else
{
return(0)
}
}
return(TruncNormalPDF)
}
TruncatedNormalTest1PDF=TruncatedNormalPDFGenerator(1.7,0.1,0,3.7)
TruncatedNormalTest1CDF=GenerateCDF(TruncatedNormalTest1PDF)
TruncatedNormalTest2PDF=TruncatedNormalPDFGenerator(3.2,0.1,0,3.7)
TruncatedNormalTest2CDF=GenerateCDF(TruncatedNormalTest2PDF)
#Mixing distributions
MixDistributionPDFGenerator<-function(PDF1,PDF2,scaling1)
{
scaling2=1-scaling1
MixPDF<-function(x)
{
return(scaling1*PDF1(x)+scaling2*PDF2(x))
}
return(MixPDF)
}
MixedNormalPDF=MixDistributionPDFGenerator(TruncatedNormalTest1PDF,TruncatedNormalTest2PDF,0.2)
MixedNormalCDF=GenerateCDF(MixedNormalPDF)
SmallRightSkewTriDisCDF(3.7)
SmallRightSkewTriDisCDF(3.7)
SmallRightSkewTriDisPDF=TriangularDistributionPDFGenerator(0,3.7,1.95)
SmallRightSkewTriDisCDF=GenerateCDF(SmallRightSkewTriDisPDF)
SmallRightSkewTriDisCDF(3.7)
SmallRightSkewTriDisPDF(3.7)
SmallRightSkewTriDisPDF(0)
TriangularDistributionPDFGenerator<-function(a,b,c)
{
TriDisPDF<-function(x)
{
if(x<=a)
{
return(0)
}
else if(x<c)
{
return((2*(x-a))/((b-a)*(c-a)))
}
else if(x==c)
{
return(2/(b-a))
}
else if(x<=b)
{
return((2*(b-x))/((b-a)*(b-c)))
}
else
{
return(0)
}
}
return(TriDisPDF)
}
ArcSineTestCDF(3.7)
RightSkewTriangularTestCDF(3.7)
RightSkewTriangularTestCDF(4)
RightSkewTriangularTestCDF(100)
RightSkewTriangularTestCDF(10000)
RightSkewTriangularTestCDF(1)
RightSkewTriangularTestCDF(0)
RightSkewTriangularTestCDF(-1)
RightSkewTriangularTestCDF(2)
RightSkewTriangularTestCDF(5)
RightSkewTriangularTestCDF(6)
RightSkewTriangularTestPDF(6)
RightSkewTriangularTestPDF(5)
integrate(vectorize(RightSkewTriangularTestPDF),5,6)
integrate(Vectorize(RightSkewTriangularTestPDF),5,6)
integrate(Vectorize(RightSkewTriangularTestPDF),0,6)
integrate(Vectorize(RightSkewTriangularTestPDF),0,5)
integrate(Vectorize(RightSkewTriangularTestPDF),0,3.7)
