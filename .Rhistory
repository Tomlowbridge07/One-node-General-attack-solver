#This file contains fuctions to solve the problem given g the equilibrium cost
#Uniform test on 0 t0 3.7 attack times
TestPDFunction<-function(x)
{
return(1/3.7)
}
GenerateCDF<-function(AttackTimePDFDistribution,Type="Continuous")
{
if(Type=="Continuous")
{
CDFDistribtion<-function(value)
{
return(integrate(Vectorize(AttackTimePDFDistribution),0,value)$value)
}
return(CDFDistribtion)
}
else if(Type=="Discrete")
{
#Placeholder for work around
}
}
#Generate the cost to progress matrix
#Note. NumRow is B+1, NumCol=b+1
GenerateCostToProgressMatrix<-function(NumRow,NumCol,Cost,Lambda,AttackTimeCDFDistribution)
{
CostToProgressMatrix=matrix(nrow=NumRow,ncol=NumCol)
for(i in 1:NumRow)
{
#We can find the arrivals during this time period
CostDueToArrivals= Cost * Lambda * integrate(Vectorize(AttackTimeCDFDistribution),i-1,i)$value
for(j in 1:NumCol)
{
CostDueToObs= Cost * (j-1) * (AttackTimeCDFDistribution(i)-AttackTimeCDFDistribution(i-1))
CostToProgressMatrix[i,j]=CostDueToArrivals+CostDueToObs
}
}
return(CostToProgressMatrix)
}
#This function returns how long to wait to renew
FindRenewInRow<-function(CurrentRowNum,EquilibriumCost,NextRowRenewIn,CostsToProgress)
{
CurrentRowRenewIn=vector(length=length(NextRowRenewIn))
for(j in 1:length(NextRowRenewIn))
{
#For element in our row we calculate and check the inequaility (number of g's vs cost)
CostIfRenew=(NextRowRenewIn[j]+1)*EquilibriumCost
CostIfNotRenew=0
for(i in 1:(NextRowRenewIn[j]+1))
{
CostIfNotRenew=CostIfNotRenew+CostsToProgress[CurrentRowNum+(i-1),j]
}
#Compare and decide
print(CostIfRenew)
print(CostIfNotRenew)
if(CostIfRenew <= CostIfNotRenew)
{
#we should renew, set currentRowRenewIn=0
print("Chosen to renew")
CurrentRowRenewIn[j]=0
}
else
{
#We should wait
print("Chosen to wait")
CurrentRowRenewIn[j]=NextRowRenewIn[j]+1
}
}
return(CurrentRowRenewIn)
}
#This function returns a matrix for each state of how long to wait till renew
FindRenewInMatrix<-function(EquilibriumCost,CostsToProgress)
{
RenewInMatrix=matrix(nrow=nrow(CostsToProgress),ncol=ncol(CostsToProgress))
for(rownum in nrow(CostsToProgress):1)
{
print(rownum)
if(rownum==nrow(CostsToProgress))
{
#Preset these to be renew immediately (as we assume g<= c lambda)
RenewInMatrix[rownum,]=rep(0,ncol(RenewInMatrix))
}
else
{
#We run the code to figure out the next row up
RenewInMatrix[rownum,]=FindRow(rownum,EquilibriumCost,RenewInMatrix[rownum+1,],CostsToProgress)
print(RenewInMatrix)
}
}
return(RenewInMatrix)
}
#This function takes a current plan an produces the value of g it would generate
FindEquilibriumValue<-function(RenewInMatrix,CostsToProgress,Lambda)
{
#Extract first row of Renew in matrix
RenewIn=RenewInMatrix[1,]
CostForCol=vector(length=length(RenewIn))
ExpectedContributionForCol=vector(length=length(RenewIn))
for(j in 1:length(RenewIn))
{
#calculate the waiting costs
if(RenewIn[j]!=0)
{
CostForCol[j]=0
for(i in 1:RenewIn[j])
{
CostForCol[j]=CostForCol[j]+CostsToProgress[i,j]
}
}
else
{
CostForCol[j]=0
}
ExpectedContributionForCol[j]=TruncPoissonPMF(Lambda,length(RenewIn)-1,j) * CostForCol[j]
ExpectedRenewalLengthContribution=TruncPoissonPMF(Lambda,length(RenewIn)-1,j) * (RenewIn[j]+1)
}
ExpectedCostPerRenewal=sum(ExpectedContributionForCol)
ExpectedRenewalLength=sum(ExpectedRenewalLengthContribution)
EquilibriumCost=ExpectedCostPerRenewal/ExpectedRenewalLength
return(EquilibriumCost)
}
FindEquilibriumValue(Plan2,CostToProg,0.1)
source("Truncated Poisson distribution.R")
#This file contains fuctions to solve the problem given g the equilibrium cost
#Uniform test on 0 t0 3.7 attack times
TestPDFunction<-function(x)
{
return(1/3.7)
}
GenerateCDF<-function(AttackTimePDFDistribution,Type="Continuous")
{
if(Type=="Continuous")
{
CDFDistribtion<-function(value)
{
return(integrate(Vectorize(AttackTimePDFDistribution),0,value)$value)
}
return(CDFDistribtion)
}
else if(Type=="Discrete")
{
#Placeholder for work around
}
}
#Generate the cost to progress matrix
#Note. NumRow is B+1, NumCol=b+1
GenerateCostToProgressMatrix<-function(NumRow,NumCol,Cost,Lambda,AttackTimeCDFDistribution)
{
CostToProgressMatrix=matrix(nrow=NumRow,ncol=NumCol)
for(i in 1:NumRow)
{
#We can find the arrivals during this time period
CostDueToArrivals= Cost * Lambda * integrate(Vectorize(AttackTimeCDFDistribution),i-1,i)$value
for(j in 1:NumCol)
{
CostDueToObs= Cost * (j-1) * (AttackTimeCDFDistribution(i)-AttackTimeCDFDistribution(i-1))
CostToProgressMatrix[i,j]=CostDueToArrivals+CostDueToObs
}
}
return(CostToProgressMatrix)
}
#This function returns how long to wait to renew
FindRenewInRow<-function(CurrentRowNum,EquilibriumCost,NextRowRenewIn,CostsToProgress)
{
CurrentRowRenewIn=vector(length=length(NextRowRenewIn))
for(j in 1:length(NextRowRenewIn))
{
#For element in our row we calculate and check the inequaility (number of g's vs cost)
CostIfRenew=(NextRowRenewIn[j]+1)*EquilibriumCost
CostIfNotRenew=0
for(i in 1:(NextRowRenewIn[j]+1))
{
CostIfNotRenew=CostIfNotRenew+CostsToProgress[CurrentRowNum+(i-1),j]
}
#Compare and decide
print(CostIfRenew)
print(CostIfNotRenew)
if(CostIfRenew <= CostIfNotRenew)
{
#we should renew, set currentRowRenewIn=0
print("Chosen to renew")
CurrentRowRenewIn[j]=0
}
else
{
#We should wait
print("Chosen to wait")
CurrentRowRenewIn[j]=NextRowRenewIn[j]+1
}
}
return(CurrentRowRenewIn)
}
#This function returns a matrix for each state of how long to wait till renew
FindRenewInMatrix<-function(EquilibriumCost,CostsToProgress)
{
RenewInMatrix=matrix(nrow=nrow(CostsToProgress),ncol=ncol(CostsToProgress))
for(rownum in nrow(CostsToProgress):1)
{
print(rownum)
if(rownum==nrow(CostsToProgress))
{
#Preset these to be renew immediately (as we assume g<= c lambda)
RenewInMatrix[rownum,]=rep(0,ncol(RenewInMatrix))
}
else
{
#We run the code to figure out the next row up
RenewInMatrix[rownum,]=FindRow(rownum,EquilibriumCost,RenewInMatrix[rownum+1,],CostsToProgress)
print(RenewInMatrix)
}
}
return(RenewInMatrix)
}
#This function takes a current plan an produces the value of g it would generate
FindEquilibriumValue<-function(RenewInMatrix,CostsToProgress,Lambda)
{
#Extract first row of Renew in matrix
RenewIn=RenewInMatrix[1,]
CostForCol=vector(length=length(RenewIn))
ExpectedContributionForCol=vector(length=length(RenewIn))
ExpectedRenewalLengthContribution=vector(length=length(RenewIn))
for(j in 1:length(RenewIn))
{
#calculate the waiting costs
if(RenewIn[j]!=0)
{
CostForCol[j]=0
for(i in 1:RenewIn[j])
{
CostForCol[j]=CostForCol[j]+CostsToProgress[i,j]
}
}
else
{
CostForCol[j]=0
}
ExpectedContributionForCol[j]=TruncPoissonPMF(Lambda,length(RenewIn)-1,j) * CostForCol[j]
ExpectedRenewalLengthContribution[j]=TruncPoissonPMF(Lambda,length(RenewIn)-1,j) * (RenewIn[j]+1)
}
ExpectedCostPerRenewal=sum(ExpectedContributionForCol)
ExpectedRenewalLength=sum(ExpectedRenewalLengthContribution)
EquilibriumCost=ExpectedCostPerRenewal/ExpectedRenewalLength
return(EquilibriumCost)
}
FindEquilibriumValue(Plan2,CostToProg,0.1)
Plan2
source("Truncated Poisson distribution.R")
#This file contains fuctions to solve the problem given g the equilibrium cost
#Uniform test on 0 t0 3.7 attack times
TestPDFunction<-function(x)
{
return(1/3.7)
}
GenerateCDF<-function(AttackTimePDFDistribution,Type="Continuous")
{
if(Type=="Continuous")
{
CDFDistribtion<-function(value)
{
return(integrate(Vectorize(AttackTimePDFDistribution),0,value)$value)
}
return(CDFDistribtion)
}
else if(Type=="Discrete")
{
#Placeholder for work around
}
}
#Generate the cost to progress matrix
#Note. NumRow is B+1, NumCol=b+1
GenerateCostToProgressMatrix<-function(NumRow,NumCol,Cost,Lambda,AttackTimeCDFDistribution)
{
CostToProgressMatrix=matrix(nrow=NumRow,ncol=NumCol)
for(i in 1:NumRow)
{
#We can find the arrivals during this time period
CostDueToArrivals= Cost * Lambda * integrate(Vectorize(AttackTimeCDFDistribution),i-1,i)$value
for(j in 1:NumCol)
{
CostDueToObs= Cost * (j-1) * (AttackTimeCDFDistribution(i)-AttackTimeCDFDistribution(i-1))
CostToProgressMatrix[i,j]=CostDueToArrivals+CostDueToObs
}
}
return(CostToProgressMatrix)
}
#This function returns how long to wait to renew
FindRenewInRow<-function(CurrentRowNum,EquilibriumCost,NextRowRenewIn,CostsToProgress)
{
CurrentRowRenewIn=vector(length=length(NextRowRenewIn))
for(j in 1:length(NextRowRenewIn))
{
#For element in our row we calculate and check the inequaility (number of g's vs cost)
CostIfRenew=(NextRowRenewIn[j]+1)*EquilibriumCost
CostIfNotRenew=0
for(i in 1:(NextRowRenewIn[j]+1))
{
CostIfNotRenew=CostIfNotRenew+CostsToProgress[CurrentRowNum+(i-1),j]
}
#Compare and decide
print(CostIfRenew)
print(CostIfNotRenew)
if(CostIfRenew <= CostIfNotRenew)
{
#we should renew, set currentRowRenewIn=0
print("Chosen to renew")
CurrentRowRenewIn[j]=0
}
else
{
#We should wait
print("Chosen to wait")
CurrentRowRenewIn[j]=NextRowRenewIn[j]+1
}
}
return(CurrentRowRenewIn)
}
#This function returns a matrix for each state of how long to wait till renew
FindRenewInMatrix<-function(EquilibriumCost,CostsToProgress)
{
RenewInMatrix=matrix(nrow=nrow(CostsToProgress),ncol=ncol(CostsToProgress))
for(rownum in nrow(CostsToProgress):1)
{
print(rownum)
if(rownum==nrow(CostsToProgress))
{
#Preset these to be renew immediately (as we assume g<= c lambda)
RenewInMatrix[rownum,]=rep(0,ncol(RenewInMatrix))
}
else
{
#We run the code to figure out the next row up
RenewInMatrix[rownum,]=FindRow(rownum,EquilibriumCost,RenewInMatrix[rownum+1,],CostsToProgress)
print(RenewInMatrix)
}
}
return(RenewInMatrix)
}
#This function takes a current plan an produces the value of g it would generate
FindEquilibriumValue<-function(RenewInMatrix,CostsToProgress,Lambda,Omega)
{
#Extract first row of Renew in matrix
RenewIn=RenewInMatrix[1,]
CostForCol=vector(length=length(RenewIn))
ExpectedContributionForCol=vector(length=length(RenewIn))
ExpectedRenewalLengthContribution=vector(length=length(RenewIn))
for(j in 1:length(RenewIn))
{
#calculate the waiting costs
if(RenewIn[j]!=0)
{
CostForCol[j]=Omega
for(i in 1:RenewIn[j])
{
CostForCol[j]=CostForCol[j]+CostsToProgress[i,j]
}
}
else
{
CostForCol[j]=Omega
}
ExpectedContributionForCol[j]=TruncPoissonPMF(Lambda,length(RenewIn)-1,j) * CostForCol[j]
ExpectedRenewalLengthContribution[j]=TruncPoissonPMF(Lambda,length(RenewIn)-1,j) * (RenewIn[j]+1)
}
ExpectedCostPerRenewal=sum(ExpectedContributionForCol)
ExpectedRenewalLength=sum(ExpectedRenewalLengthContribution)
EquilibriumCost=ExpectedCostPerRenewal/ExpectedRenewalLength
return(EquilibriumCost)
}
FindEquilibriumValue(Plan2,CostToProg,0.1,0.05)
FindEquilibriumValue(Plan2,CostToProg,0.1,0.04)
FindEquilibriumValue(Plan2,CostToProg,0.1,0.05)
Plan2=FindMatrix(0.05,CostToProg)
FindEquilibriumValue(Plan2,CostToProg,0.1,0.05)
Plan2=FindMatrix(0.035,CostToProg)
FindEquilibriumValue(Plan2,CostToProg,0.1,0.05)
Plan2=FindMatrix(0.0322,CostToProg)
FindEquilibriumValue(Plan2,CostToProg,0.1,0.05)
Plan2=FindMatrix(0.01,CostToProg)
FindEquilibriumValue(Plan2,CostToProg,0.1,0.05)
Plan2=FindMatrix(0.05,CostToProg)
source("General attack solver.R")
IterationSolver<-function(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
if(TypeOfAttackTimeDis=="PDF")
{
#Conversion is required
AttackTimeDistribution=GenerateCDF(AttackTimePDFDistribution)
}
#Generate cost matrix
CostToProgressMatrix=GenerateCostToProgressMatrix(B+1,b+1,Cost,Lambda,AttackTimeDistribution)
#Then we peform iterations to find g with an initial guess of 1
InitialGuess=1
EvaluatedEquilibrium=InitialGuess
MinTolerance=0.0001
MaxSteps=1000
Steps=1
Tolerance=MinTolerance+1
CurrentPlan=FindRenewInMatrix(InitialGuess,CostToProgressMatrix)
while(Tolerance>MinTolerance && Step<MaxSteps)
{
OldEquilibriumValue=EvaluatedEquilibrium
EvaluatedEquilibrium=FindEquilibriumValue(CurrentPlan,CostToProgressMatrix,Lambda,Omega)
CurrentPlan=FindRenewInMatrix(EvaluatedEquilibrium,CostToProgressMatrix)
#Now see if equilibrium value has changed (Equally we could see if plan has changed ??)
Tolerance=abs(EvaluatedEquilibrium-OldEquilibriumValue)/OldEquilibriumValue
Steps=Steps+1
}
return(Plan=CurrentPlan,EquilibriumValue=EvaluatedEquilibrium)
}
IterationSolver(0.05,TestCDF,4,3,1,0.1)
source("General attack solver.R")
IterationSolver<-function(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
if(TypeOfAttackTimeDis=="PDF")
{
#Conversion is required
AttackTimeDistribution=GenerateCDF(AttackTimePDFDistribution)
}
#Generate cost matrix
CostToProgressMatrix=GenerateCostToProgressMatrix(B+1,b+1,Cost,Lambda,AttackTimeDistribution)
#Then we peform iterations to find g with an initial guess of 1
InitialGuess=1
EvaluatedEquilibrium=InitialGuess
MinTolerance=0.0001
MaxSteps=1000
Step=1
Tolerance=MinTolerance+1
CurrentPlan=FindRenewInMatrix(InitialGuess,CostToProgressMatrix)
while(Tolerance>MinTolerance && Step<MaxSteps)
{
OldEquilibriumValue=EvaluatedEquilibrium
EvaluatedEquilibrium=FindEquilibriumValue(CurrentPlan,CostToProgressMatrix,Lambda,Omega)
CurrentPlan=FindRenewInMatrix(EvaluatedEquilibrium,CostToProgressMatrix)
#Now see if equilibrium value has changed (Equally we could see if plan has changed ??)
Tolerance=abs(EvaluatedEquilibrium-OldEquilibriumValue)/OldEquilibriumValue
Step=Step+1
}
return(Plan=CurrentPlan,EquilibriumValue=EvaluatedEquilibrium)
}
IterationSolver(0.05,TestCDF,4,3,1,0.1)
source("General attack solver.R")
IterationSolver<-function(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
if(TypeOfAttackTimeDis=="PDF")
{
#Conversion is required
AttackTimeDistribution=GenerateCDF(AttackTimePDFDistribution)
}
#Generate cost matrix
CostToProgressMatrix=GenerateCostToProgressMatrix(B+1,b+1,Cost,Lambda,AttackTimeDistribution)
#Then we peform iterations to find g with an initial guess of 1
InitialGuess=1
EvaluatedEquilibrium=InitialGuess
MinTolerance=0.0001
MaxSteps=1000
Step=1
Tolerance=MinTolerance+1
CurrentPlan=FindRenewInMatrix(InitialGuess,CostToProgressMatrix)
while(Tolerance>MinTolerance && Step<MaxSteps)
{
OldEquilibriumValue=EvaluatedEquilibrium
EvaluatedEquilibrium=FindEquilibriumValue(CurrentPlan,CostToProgressMatrix,Lambda,Omega)
CurrentPlan=FindRenewInMatrix(EvaluatedEquilibrium,CostToProgressMatrix)
#Now see if equilibrium value has changed (Equally we could see if plan has changed ??)
Tolerance=abs(EvaluatedEquilibrium-OldEquilibriumValue)/OldEquilibriumValue
Step=Step+1
}
return(list(Plan=CurrentPlan,EquilibriumValue=EvaluatedEquilibrium))
}
IterationSolver(0.05,TestCDF,4,3,1,0.1)
IterationSolver(0.02,TestCDF,4,3,1,0.1)
IterationSolver(0.001,TestCDF,4,3,1,0.1)
IterationSolver(0.08,TestCDF,4,3,1,0.1)
IterationSolver(0.1,TestCDF,4,3,1,0.1)
IterationSolver(0.2,TestCDF,4,3,1,0.1)
IterationSolver(2,TestCDF,4,3,1,0.1)
IterationSolver(77,TestCDF,4,3,1,0.1)
IterationSolver(0.1,TestCDF,4,3,1,0.1)
IterationSolver(2,TestCDF,4,3,1,0.1)
source("General attack solver.R")
IterationSolver<-function(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
if(TypeOfAttackTimeDis=="PDF")
{
#Conversion is required
AttackTimeDistribution=GenerateCDF(AttackTimePDFDistribution)
}
#Generate cost matrix
CostToProgressMatrix=GenerateCostToProgressMatrix(B+1,b+1,Cost,Lambda,AttackTimeDistribution)
#Then we peform iterations to find g with an initial guess of c * lambda
InitialGuess= Cost * Lambda
EvaluatedEquilibrium=InitialGuess
MinTolerance=0.0001
MaxSteps=1000
Step=1
Tolerance=MinTolerance+1
CurrentPlan=FindRenewInMatrix(InitialGuess,CostToProgressMatrix)
while(Tolerance>MinTolerance && Step<MaxSteps)
{
OldEquilibriumValue=EvaluatedEquilibrium
EvaluatedEquilibrium=FindEquilibriumValue(CurrentPlan,CostToProgressMatrix,Lambda,Omega)
CurrentPlan=FindRenewInMatrix(EvaluatedEquilibrium,CostToProgressMatrix)
#Now see if equilibrium value has changed (Equally we could see if plan has changed ??)
Tolerance=abs(EvaluatedEquilibrium-OldEquilibriumValue)/OldEquilibriumValue
Step=Step+1
}
return(list(Plan=CurrentPlan,EquilibriumValue=EvaluatedEquilibrium))
}
IterationSolver(2,TestCDF,4,3,1,0.1)
IterationSolver(0.2,TestCDF,4,3,1,0.1)
IterationSolver(0.1,TestCDF,4,3,1,0.1)
IterationSolver(0.1,TestCDF,4,3,1,0.1)
IterationSolver(0.15,TestCDF,4,3,1,0.1)
