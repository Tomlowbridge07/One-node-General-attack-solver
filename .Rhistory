XYCoordinatedataframe<-cbind(XYCoordinatedataframe,YCoordinates)
XYCoordinatedataframe<-cbind(XYCoordinatedataframe,YBoundary)
print(XYCoordinatedataframe)
DataFrame<-XYCoordinatedataframe
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
XPointChanging=PlanChanging
print(XPointChanging)
YPointChanging=rep(0,length(XPointChanging))
print(YPointChanging)
for(i in 1:length(XPointChanging))
{
YPointChanging[i]=YCoordinates[which(XCoordinates==XPointChanging[i])]
}
print(YPointChanging)
XYPointdataframe<-data.frame(XPointChanging)
XYPointdataframe<-cbind(XPointChanging,YPointChanging)
MeltedDataFrame2<-melt(XYPointdataframe,id="XPointChanging")
print(XYPointdataframe)
print(MeltedDataFrame2)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True')+geom_line()+geom_point(aes(x=XPointChanging,y=YPointChanging),data=MeltedDataFrame2,inherit.aes = F)
print(Plot)
}
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints)
PlotOmegaEquilibrium<-function(OmegaEquilibriumMatrix,PlanChanging)
{
XCoordinates=OmegaEquilibriumMatrix[1,]
YCoordinates=OmegaEquilibriumMatrix[2,]
YBoundary=rep(0.1,length(XCoordinates))
XYCoordinatedataframe=data.frame(XCoordinates)
XYCoordinatedataframe<-cbind(XYCoordinatedataframe,YCoordinates)
XYCoordinatedataframe<-cbind(XYCoordinatedataframe,YBoundary)
print(XYCoordinatedataframe)
DataFrame<-XYCoordinatedataframe
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
XPointChanging=PlanChanging
print(XPointChanging)
YPointChanging=rep(0,length(XPointChanging))
print(YPointChanging)
for(i in 1:length(XPointChanging))
{
YPointChanging[i]=YCoordinates[which(XCoordinates==XPointChanging[i])]
}
print(YPointChanging)
XYPointdataframe<-data.frame(XPointChanging)
XYPointdataframe<-cbind(XPointChanging,YPointChanging)
MeltedDataFrame2<-melt(as.data.frame(XYPointdataframe),id="XPointChanging")
print(XYPointdataframe)
print(MeltedDataFrame2)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True')+geom_line()+geom_point(aes(x=XPointChanging,y=YPointChanging),data=MeltedDataFrame2,inherit.aes = F)
print(Plot)
}
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints)
source("General attack solver.R")
library(ggplot2)
library(reshape)
library(tikzDevice)
install.packages("tikzDevice")
library("tikzDevice", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library(tikzDevice)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints)
PlotOmegaEquilibrium<-function(OmegaEquilibriumMatrix,PlanChanging,Cost,Lambda)
{
XCoordinates=OmegaEquilibriumMatrix[1,]
YCoordinates=OmegaEquilibriumMatrix[2,]
YBoundary=rep(Cost*Lambda,length(XCoordinates))
XYCoordinatedataframe=data.frame(XCoordinates)
XYCoordinatedataframe<-cbind(XYCoordinatedataframe,YCoordinates)
XYCoordinatedataframe<-cbind(XYCoordinatedataframe,YBoundary)
print(XYCoordinatedataframe)
DataFrame<-XYCoordinatedataframe
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
XPointChanging=PlanChanging
print(XPointChanging)
YPointChanging=rep(0,length(XPointChanging))
print(YPointChanging)
for(i in 1:length(XPointChanging))
{
YPointChanging[i]=YCoordinates[which(XCoordinates==XPointChanging[i])]
}
print(YPointChanging)
XYPointdataframe<-data.frame(XPointChanging)
XYPointdataframe<-cbind(XPointChanging,YPointChanging)
MeltedDataFrame2<-melt(as.data.frame(XYPointdataframe),id="XPointChanging")
print(XYPointdataframe)
print(MeltedDataFrame2)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True')+geom_line()+geom_point(aes(x=XPointChanging,y=YPointChanging),data=MeltedDataFrame2,inherit.aes = F)
print(Plot)
}
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
Plans=c(Plans,Plan)
}
CurrentPlan=Plan
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
Plans=c(Plans,Plan)
}
CurrentPlan=Plan
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
OE$FullPlans
OE$Plans
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
Plans=list(Plans,Plan)
}
CurrentPlan=Plan
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
}
CurrentPlan=Plan
}
#Get all patterns that matter
Plans=list(length=length(PlanChanging))
for(i in 1:length(FullPlans))
{
Plans[[i]]=FullPlans[OmegaIncrease*PlanChanging[i]]
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
}
CurrentPlan=Plan
}
#Get all patterns that matter
Plans=list(length=length(PlanChanging))
for(i in 1:length(FullPlans))
{
Plans[[i]]=FullPlans[[OmegaIncrease*PlanChanging[i]]]
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
}
CurrentPlan=Plan
}
#Get all patterns that matter
Plans=list(length=length(PlanChanging))
for(i in 1:length(FullPlans))
{
Plans[[i]]=FullPlans[[(OmegaIncrease*PlanChanging[i])+1]]
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
OE$PlansChangingPoints
OE$FullPlans
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
}
CurrentPlan=Plan
}
#Get all patterns that matter
Plans=list(length=length(PlanChanging))
for(i in 1:length(Plans))
{
Plans[[i]]=FullPlans[[(OmegaIncrease*PlanChanging[i])+1]]
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$FullPlans
OE$Plans
OE$PlansChangingPoints
length(OE$PlansChangingPoints)
length(list(length=5))
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
}
CurrentPlan=Plan
}
#Get all patterns that matter
Plans=list(length=length(PlanChanging))
for(i in 1:length(PlanChanging))
{
Plans[[i]]=FullPlans[[(OmegaIncrease*PlanChanging[i])+1]]
}
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
Plans[[i]]=Plan
}
CurrentPlan=Plan
}
# #Get all patterns that matter
# Plans=list(length=length(PlanChanging))
# for(i in 1:length(PlanChanging))
# {
#   Plans[[i]]=FullPlans[[(OmegaIncrease*PlanChanging[i])+1]]
# }
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
SolveForMultipleOmega<-function(OmegaMin,OmegaMax,OmegaSteps,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis="CDF")
{
#For each omega we run the code, store g for that omega
OmegaIncrease=(OmegaMax-OmegaMin)/OmegaSteps
CurrentPlan=matrix(rep(-1,(B+1)*(b+1)),nrow=B+1,ncol=b+1)
OmegaEquilibrium=matrix(nrow=2,ncol=OmegaSteps+1)
FullPlans=list(length=OmegaSteps+1)
PlanChanging=vector(length=0)
Plans=list()
PlanChangingCounter=1
for(i in 1:(OmegaSteps+1))
{
Omega=OmegaMin+(i-1)*OmegaIncrease
#Run iteration solver to find plan and g
Solved=IterationSolver(Omega,AttackTimeDistribution,B,b,Cost,Lambda,TypeOfAttackTimeDis)
g=Solved$EquilibriumValue
Plan=Solved$Plan
FullPlans[[i]]=Plan
OmegaEquilibrium[1,i]=Omega
OmegaEquilibrium[2,i]=g
#See if the plan changes
if(!all(CurrentPlan==Plan))
{
PlanChanging=c(PlanChanging,Omega)
Plans[[PlanChangingCounter]]=Plan
PlanChangingCounter=PlanChangingCounter+1
}
CurrentPlan=Plan
}
# #Get all patterns that matter
# Plans=list(length=length(PlanChanging))
# for(i in 1:length(PlanChanging))
# {
#   Plans[[i]]=FullPlans[[(OmegaIncrease*PlanChanging[i])+1]]
# }
return(list(OmegaEquilibriumMatrix=OmegaEquilibrium,FullPlans=FullPlans,PlansChangingPoints=PlanChanging,Plans=Plans))
}
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
View(TestCDF)
TestCDF(1)
TestCDF(2)
TestCDF(4)
TestCDF(3.7)
TestCDF(1)
TestCDF=GenerateCDF(TestPDFunction)
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
TestCDF=GenerateCDF(TestPDFunction,"Discrete")
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE$Plans
TestPDF<-function(x)
{
return((2/(3.7^2))*x)
}
TestCDF=GenerateCDF(TestPDF)
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
View(TestPDF)
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE$Plans
TestPDF1<-function(x)
{
return(matrix(c(1.7,2.4,3.2,0.2,0.3,0.5),nrow=2,ncol=2,byrow = T))
}
TestCDF=GenerateCDF(TestPDF1,"Discrete")
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE$Plans
TestPDF2<-function(x)
{
return(matrix(c(1.2,2.2,3.2,0.1,0.4,0.5),nrow=2,ncol=2,byrow = T))
}
TestCDF=GenerateCDF(TestPDF2,"Discrete")
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
OE$Plans
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE$Plans
TestPDF3<-function(x)
{
return((3/(3.7^2))*x)
}
TestCDF=GenerateCDF(TestPDF3,"Discrete")
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
TestCDF=GenerateCDF(TestPDF3,"Discrete")
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
TestCDF=GenerateCDF(TestPDF3)
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
TestPDF3<-function(x)
{
return((3/(3.7^3))*x)
}
TestCDF=GenerateCDF(TestPDF3)
OE=SolveForMultipleOmega(0,1,500,TestCDF,4,3,1,0.1)
PlotOmegaEquilibrium(OE$OmegaEquilibriumMatrix,OE$PlansChangingPoints,1,0.1)
OE$Plans
